#!/bin/bash

# Check if commands exists
function check_command() {
     if ! $1 --version &>/dev/null; then
          echo "error: The required command '$1' is not installed. Please install '$1' before running tests." >&2
          return 1
     fi
     return 0
}

check_command docker || exit 1
check_command zip || exit 1
check_command curl || exit 1
check_command awk || exit 1

# Check if docker is running
if ! docker info >/dev/null 2>&1; then
     echo "Docker is not running. Please start docker before running tests."
     exit 1
fi

function cleanup() {
     echo -ne "\nCopying server logs from container... "
     local out=$(docker cp $container_id:/app/logs.txt logs.txt)
     if [ $? -eq 0 ]; then
          echo "done."
     else
          echo "error: $out" >&2
     fi

     echo -n "Stopping container... "
     local out=$(docker stop $container_id)
     if [ $? -eq 0 ]; then
          echo "done."
     else
          echo "error: $out" >&2
          exit 1
     fi
}

function deploy_task() {
     # ZIP the task
     echo -n "Compressing $1... "
     cd $1
     zip $1.zip -r . >/dev/null 2>&1
     mv $1.zip ..
     cd ..
     echo "done."
     # Deploy it
     echo -n "Deploying $1... "
     local status_code=$(
          # Use lowercase task name
          curl -X PUT http://localhost:8000/${1,,} \
               -H "Content-Type: multipart/form-data" \
               -F "zip_file=@$1.zip" \
               -o /dev/null \
               -s -w "%{http_code}"
     )
     if [ ! "$status_code" -eq 200 ]; then
          echo "error."
          cleanup
          exit 1
     fi
     echo "done."
     task_info $1
}

function task_info() {
     local response=$(curl -s http://localhost:8000/${1,,} | sed 's/^/\t/')
     echo -e "State of $1:\n$response"
}

function wait_until_available() {
     while true; do
          local response=$(curl -s http://localhost:8000/${1,,})
          local status_code=$(
               curl http://localhost:8000/${1,,} \
                    -o /dev/null \
                    -s -w "%{http_code}"
          )
          if [ "$status_code" -eq 200 ]; then
               break
          fi
          sleep 5
     done
}

function wait_until_fused() {
     while true; do
          local response=$(curl -s http://localhost:8000/${1,,})
          local status_code=$(
               curl http://localhost:8000/${1,,} \
                    -o /dev/null \
                    -s -w "%{http_code}"
          )
          if [ "$status_code" -eq 200 ] &&
               ! echo "$response" | grep -q "Currently deployed with other Tasks: None"; then
               break
          fi
          sleep 5
     done
}

function wait_until() {
     while true; do
          local status_code=$(
               curl http://localhost:8000/${1,,} \
                    -o /dev/null \
                    -s -w "%{http_code}"
          )
          if [ "$status_code" -eq 200 ]; then
               [ $2 != "fused" ] && break
               local response=$(curl -s http://localhost:8000/${1,,})
               ! echo "$response" | grep -q "Currently deployed with other Tasks: None" && break
          fi
          sleep 5
     done
}

# Start Fusionizer server in docker container
echo -n "Starting Fusionizer server... "
container_id=$(
     docker run \
          -e ADDRESS=$(hostname -I | awk '{print $1}') \
          -p 8000:8000 \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -d ghcr.io/marvin-steinke/nuclio-fusionizer:latest
)
if [ $? -eq 0 ]; then
     echo "done."
else
     echo "error: $container_id" >&2
     exit 1
fi

# Copy config file
echo -n "Copying config.json to server... "
response=$(docker cp config.json $container_id:/app/config.json)
if [ $? -eq 0 ]; then
     echo "done."
else
     echo "error: $response" >&2
     cleanup
     exit 1
fi

# Wait for server to start
echo -n "Waiting for server to start... "
sleep 3
echo -e "done.\n"

# Deploy Tasks
deploy_task "TaskA"
echo ""
deploy_task "TaskB"
echo ""

# Invoke Task A before fusion (Task A has no args)
echo -n "Invoking Task A before fusion (5+3)... "
response=$(curl -s -X POST http://localhost:8000/taska)
echo "done. Task A returns: $response"

# Wait for fusion
echo -n "Waiting for Task A and B to be fused... "
wait_until "TaskA" "fused"
echo -n "done. "
task_info "TaskA"

# Invoke Task A after fusion
echo -n "Invoking Task A after fusion (5+3)... "
response=$(curl -s -X POST http://localhost:8000/taska)
echo -e "done. Task A returns: It's still $response\n"

# Delete Task A
echo -n "Deleting Task A... "
response=$(curl -s -X DELETE http://localhost:8000/taska)
echo -n "done. "
task_info "TaskA"
echo ""

# Now check Task B. Since Task A was deleted, the Fusion Group has to be re-deployed
echo -n "Waiting for redeployment of Fusion Group with Task B... "
wait_until "TaskB" "available"
echo -e "done. "
task_info "TaskB"

# Invoke Task B
echo -n "Invoking Task B after re-deployment (4+8)... "
response=$(
     curl -s -X POST http://localhost:8000/taskb \
          -H "Content-Type: application/json" \
          -d '{"value1": 4, "value2": 8}'
)
echo -e "done. Task B returns: $response\n"

# Delete Task A
echo -n "Deleting Task B... "
response=$(curl -s -X DELETE http://localhost:8000/taskb)
echo -n "done. "
task_info "TaskA"

cleanup

# Compare test logs with reference logs, ignoring addresses and dates.
echo -en "\nComparing test logs with reference logs... "
result=$(
     diff <(cut -d '|' -f 2- logs.txt | sed 's/http:\/\/[0-9.]*:[0-9]*//g') \
          <(cut -d '|' -f 2- ref_logs.txt | sed 's/http:\/\/[0-9.]*:[0-9]*//g')
)
if [ -z "$result" ]; then
     echo "done. No differences found"
else
     echo -e "warning. Differences found:\n$result"
fi
